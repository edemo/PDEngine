#!/usr/bin/python

import sys
import json
import urllib
import re
import argparse

parser = argparse.ArgumentParser(description="Tool for list dev's completed tasks with implemented test case count.")
parser.add_argument('user', help='Repository owner Github user')
parser.add_argument('repo', help='Name of Github repo')
parser.add_argument('token', help='Access token')
parser.add_argument('developer', help='Github user name of the developer')
parser.add_argument('-l', '--last-billed', help='Last billed pull request number', default=0, type=int)
args = parser.parse_args();

def isUser(developer, userToMatch):
    return userToMatch is not None and developer == userToMatch['login']

def getJSONContent(uri):
    request = urllib.urlopen(uri)
    return json.loads(request.read() if request.getcode() == 200 else "[]")

def uriWithToken(uri, token):
    return "{0}?access_token={1}".format(uri, token)
    
def getTestCaseCountFromComments(uri):
    comments = getJSONContent(uri)
    for comment in comments:
      match = re.match(r".*testcase\w*\s*=\s*(\d+)", comment['body'], re.DOTALL | re.IGNORECASE)
      if match is not None:
          return match.group(1)

def getTestcaseCount(commentsUri, reviewsUri, token):
    return getTestCaseCountFromComments(uriWithToken(commentsUri, token)) or getTestCaseCountFromComments(uriWithToken(reviewsUri, token))

def reviewsUrl(user, repo, pullId):
    return "https://api.github.com/repos/{0}/{1}/pulls/{2}/reviews".format(user, repo, pullId);

def issuesUrl(user, repo, developer, token):
    return "https://api.github.com/search/issues?q=user:{0}+repo:{1}+author:{2}+state:closed+type:pr+review:approved&sort=number&order=desc&access_token={3}".format(user, repo, developer, token)


print "Description | PR number | Test case count"
sumTests = 0
issuesUri = issuesUrl(args.user, args.repo, args.developer, args.token)
issues = filter(lambda i: int(i['number']) > args.last_billed, getJSONContent(issuesUri)['items'])
for issue in issues:
  testCaseCount = getTestcaseCount(issue['comments_url'], reviewsUrl(args.user, args.repo, issue['number']), args.token)
  print "{0} | {1} | {2}".format(issue['title'], issue['number'], testCaseCount)
  sumTests += int(testCaseCount or 0)

print "\nSum Test Cases: ", sumTests
